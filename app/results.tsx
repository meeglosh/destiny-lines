
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, ScrollView, Pressable, Alert } from 'react-native';
import { router, useLocalSearchParams } from 'expo-router';
import * as Sharing from 'expo-sharing';
import { commonStyles, colors, textStyles, buttonStyles } from '@/styles/commonStyles';
import { Button } from '@/components/button';
import { LinearGradient } from 'expo-linear-gradient';
import AdBanner from '@/components/AdBanner';

interface PalmReading {
  lifeLine: {
    icon: string;
    title: string;
    content: string;
  };
  headLine: {
    icon: string;
    title: string;
    content: string;
  };
  heartLine: {
    icon: string;
    title: string;
    content: string;
  };
  handShape: {
    icon: string;
    title: string;
    content: string;
  };
  overall: {
    icon: string;
    title: string;
    content: string;
  };
}

// Fallback reading in case no reading is provided
const defaultPalmReading: PalmReading = {
  lifeLine: {
    icon: 'üåø',
    title: 'Life Line',
    content: 'Your life line curves broadly around the base of your thumb and is fairly strong. In palmistry, that suggests good stamina, a strong constitution, and the ability to bounce back from setbacks. You\'re likely someone who doesn\'t stay down for long ‚Äî resilience is your quiet superpower.'
  },
  headLine: {
    icon: 'üß†',
    title: 'Head Line',
    content: 'Your head line runs fairly straight across the palm, not overly curved. This is often read as a sign of clear, practical thinking and a rational approach to life. You weigh decisions carefully, preferring logic over impulse. People probably see you as steady and reliable when it comes to making choices.'
  },
  heartLine: {
    icon: '‚ù§Ô∏è',
    title: 'Heart Line',
    content: 'Your heart line sits higher and looks straighter than deeply curved. In palmistry, that suggests you\'re not overly dramatic in love ‚Äî you value stability, trust, and loyalty. You might not be wildly expressive all the time, but when you commit, you commit deeply.'
  },
  handShape: {
    icon: '‚úã',
    title: 'Shape of the Hand',
    content: 'Your hand looks rectangular with longer fingers ‚Äî this is sometimes called an "air hand." In palmistry, that\'s tied to curiosity, communication, and creativity. You probably like exploring ideas, connecting dots, and solving problems in inventive ways.'
  },
  overall: {
    icon: 'üåü',
    title: 'Overall Reading',
    content: 'Your palm suggests someone who\'s resilient, thoughtful, and steady in both practical and emotional life. You balance a curious, creative mind with a strong need for groundedness. Others likely lean on you for clarity and consistency ‚Äî but you also have a restless streak that keeps you seeking out new ideas and projects.'
  }
};

export default function ResultsScreen() {
  const params = useLocalSearchParams();
  const [isSharing, setIsSharing] = useState(false);
  const [palmReading, setPalmReading] = useState<PalmReading>(defaultPalmReading);

  console.log('ResultsScreen rendered with params:', params);

  useEffect(() => {
    // Parse the reading from params if available
    if (params.reading && typeof params.reading === 'string') {
      try {
        const parsedReading = JSON.parse(params.reading);
        console.log('Parsed palm reading from params:', parsedReading);
        setPalmReading(parsedReading);
      } catch (error) {
        console.log('Error parsing reading from params:', error);
        // Keep default reading if parsing fails
      }
    }
  }, [params.reading]);

  const shareReading = async () => {
    console.log('Sharing palm reading');
    setIsSharing(true);

    try {
      const readingText = `üîÆ My Destiny Lines Palm Reading üîÆ\n\n` +
        `${palmReading.lifeLine.icon} ${palmReading.lifeLine.title}\n${palmReading.lifeLine.content}\n\n` +
        `${palmReading.headLine.icon} ${palmReading.headLine.title}\n${palmReading.headLine.content}\n\n` +
        `${palmReading.heartLine.icon} ${palmReading.heartLine.title}\n${palmReading.heartLine.content}\n\n` +
        `${palmReading.handShape.icon} ${palmReading.handShape.title}\n${palmReading.handShape.content}\n\n` +
        `${palmReading.overall.icon} ${palmReading.overall.title}\n${palmReading.overall.content}\n\n` +
        `Generated by Destiny Lines - AI Palm Reading App`;

      const isAvailable = await Sharing.isAvailableAsync();
      if (isAvailable) {
        await Sharing.shareAsync('data:text/plain;base64,' + btoa(readingText), {
          mimeType: 'text/plain',
          dialogTitle: 'Share Your Palm Reading',
        });
        console.log('Reading shared successfully');
      } else {
        Alert.alert('Sharing not available', 'Sharing is not available on this device.');
      }
    } catch (error) {
      console.log('Error sharing reading:', error);
      Alert.alert('Error', 'Failed to share reading. Please try again.');
    } finally {
      setIsSharing(false);
    }
  };

  const saveReading = () => {
    console.log('Saving reading to history');
    // TODO: Implement actual saving to local storage or database
    Alert.alert(
      'Reading Saved',
      'Your palm reading has been saved to your history.',
      [{ text: 'OK' }]
    );
  };

  const getNewReading = () => {
    console.log('Getting new reading');
    router.push('/camera');
  };

  return (
    <View style={commonStyles.wrapper}>
      <LinearGradient
        colors={['#F5F1E8', '#E8DCC6', '#D4C4A8']}
        style={styles.container}
      >
        <ScrollView 
          style={styles.scrollView}
          contentContainerStyle={styles.scrollContent}
          showsVerticalScrollIndicator={false}
        >
          {/* Header */}
          <View style={styles.header}>
            <Text style={styles.title}>üîÆ Your Destiny Revealed</Text>
            <Text style={styles.subtitle}>AI Palm Reading Results</Text>
          </View>

          {/* Ad Banner */}
          <AdBanner />

          {/* Reading Sections */}
          <View style={styles.readingContainer}>
            {Object.entries(palmReading).map(([key, section]) => (
              <View key={key} style={styles.sectionCard}>
                <View style={styles.sectionHeader}>
                  <Text style={styles.sectionIcon}>{section.icon}</Text>
                  <Text style={styles.sectionTitle}>{section.title}</Text>
                </View>
                <Text style={styles.sectionContent}>{section.content}</Text>
              </View>
            ))}
          </View>

          {/* Action Buttons */}
          <View style={styles.actionSection}>
            <Button
              onPress={shareReading}
              loading={isSharing}
              disabled={isSharing}
              style={styles.primaryButton}
              textStyle={styles.primaryButtonText}
              size="lg"
            >
              {isSharing ? 'Sharing...' : 'üì§ Share Reading'}
            </Button>
            
            <Button
              onPress={saveReading}
              style={styles.secondaryButton}
              textStyle={styles.secondaryButtonText}
              size="md"
              variant="outline"
            >
              üíæ Save to History
            </Button>
            
            <Button
              onPress={getNewReading}
              style={styles.tertiaryButton}
              textStyle={styles.tertiaryButtonText}
              size="md"
              variant="ghost"
            >
              üîÑ New Reading
            </Button>
          </View>
        </ScrollView>
      </LinearGradient>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    paddingHorizontal: 20,
    paddingTop: 20,
    paddingBottom: 40,
  },
  header: {
    alignItems: 'center',
    marginBottom: 20,
  },
  title: {
    ...textStyles.title,
    fontSize: 28,
    marginBottom: 8,
  },
  subtitle: {
    ...textStyles.subtitle,
    fontSize: 16,
  },
  readingContainer: {
    marginBottom: 30,
  },
  sectionCard: {
    ...commonStyles.card,
    marginBottom: 16,
  },
  sectionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  sectionIcon: {
    fontSize: 24,
    marginRight: 12,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: colors.text,
    flex: 1,
  },
  sectionContent: {
    ...textStyles.body,
    textAlign: 'left',
  },
  actionSection: {
    paddingTop: 20,
    gap: 16,
  },
  primaryButton: {
    backgroundColor: colors.primary,
    paddingVertical: 18,
    paddingHorizontal: 40,
    borderRadius: 28,
    minHeight: 56,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.1,
    shadowRadius: 15,
    elevation: 5,
    alignItems: 'center',
    justifyContent: 'center',
  },
  primaryButtonText: {
    fontSize: 18,
    fontFamily: 'OpenSans_700Bold',
    color: colors.white,
    textAlign: 'center',
    lineHeight: 22,
    includeFontPadding: false,
  },
  secondaryButton: {
    backgroundColor: colors.white,
    paddingVertical: 16,
    paddingHorizontal: 40,
    borderRadius: 28,
    borderWidth: 2,
    borderColor: colors.secondary,
    minHeight: 52,
    alignItems: 'center',
    justifyContent: 'center',
  },
  secondaryButtonText: {
    fontSize: 16,
    fontFamily: 'OpenSans_600SemiBold',
    color: colors.primary,
    textAlign: 'center',
    lineHeight: 20,
    includeFontPadding: false,
  },
  tertiaryButton: {
    backgroundColor: 'transparent',
    paddingVertical: 14,
    paddingHorizontal: 40,
    minHeight: 48,
    alignItems: 'center',
    justifyContent: 'center',
  },
  tertiaryButtonText: {
    color: colors.textSecondary,
    fontSize: 16,
    fontWeight: '500',
    textAlign: 'center',
    textDecorationLine: 'underline',
    lineHeight: 20,
    includeFontPadding: false,
  },
});
